/*
 * Documentation
 * Documentation for backend by swagger
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: matsnnik@fit.cvut.cz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DoctorLoginDTO;
import org.openapitools.client.model.DoctorModel;
import org.openapitools.client.model.PatientDTO;
import org.openapitools.client.model.PatientLoginDTO;
import org.openapitools.client.model.RequestModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for accept
     * @param name  (required)
     * @param doctor  (required)
     * @param patient  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptCall(String name, Integer doctor, Integer patient, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/accept/{name}/{doctor}/{patient}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "doctor" + "\\}", localVarApiClient.escapeString(doctor.toString()))
            .replaceAll("\\{" + "patient" + "\\}", localVarApiClient.escapeString(patient.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptValidateBeforeCall(String name, Integer doctor, Integer patient, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling accept(Async)");
        }
        
        // verify the required parameter 'doctor' is set
        if (doctor == null) {
            throw new ApiException("Missing the required parameter 'doctor' when calling accept(Async)");
        }
        
        // verify the required parameter 'patient' is set
        if (patient == null) {
            throw new ApiException("Missing the required parameter 'patient' when calling accept(Async)");
        }
        

        okhttp3.Call localVarCall = acceptCall(name, doctor, patient, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param doctor  (required)
     * @param patient  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void accept(String name, Integer doctor, Integer patient) throws ApiException {
        acceptWithHttpInfo(name, doctor, patient);
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param doctor  (required)
     * @param patient  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> acceptWithHttpInfo(String name, Integer doctor, Integer patient) throws ApiException {
        okhttp3.Call localVarCall = acceptValidateBeforeCall(name, doctor, patient, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param doctor  (required)
     * @param patient  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptAsync(String name, Integer doctor, Integer patient, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptValidateBeforeCall(name, doctor, patient, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessions/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void create() throws ApiException {
        createWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param oid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(Integer oid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessions/session/{oid}"
            .replaceAll("\\{" + "oid" + "\\}", localVarApiClient.escapeString(oid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(Integer oid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling delete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCall(oid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param oid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void delete(Integer oid) throws ApiException {
        deleteWithHttpInfo(oid);
    }

    /**
     * 
     * 
     * @param oid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(Integer oid) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(oid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(Integer oid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(oid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for doctorsDidDelete
     * @param did  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsDidDeleteCall(Integer did, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/doctors/{did}"
            .replaceAll("\\{" + "did" + "\\}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doctorsDidDeleteValidateBeforeCall(Integer did, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling doctorsDidDelete(Async)");
        }
        

        okhttp3.Call localVarCall = doctorsDidDeleteCall(did, _callback);
        return localVarCall;

    }

    /**
     * Delete a doctor by ID
     * Deletes the doctor with the specified ID. 
     * @param did  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public String doctorsDidDelete(Integer did) throws ApiException {
        ApiResponse<String> localVarResp = doctorsDidDeleteWithHttpInfo(did);
        return localVarResp.getData();
    }

    /**
     * Delete a doctor by ID
     * Deletes the doctor with the specified ID. 
     * @param did  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> doctorsDidDeleteWithHttpInfo(Integer did) throws ApiException {
        okhttp3.Call localVarCall = doctorsDidDeleteValidateBeforeCall(did, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a doctor by ID (asynchronously)
     * Deletes the doctor with the specified ID. 
     * @param did  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsDidDeleteAsync(Integer did, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = doctorsDidDeleteValidateBeforeCall(did, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doctorsDidGet
     * @param did  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested doctor was returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsDidGetCall(Integer did, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/doctors/{did}"
            .replaceAll("\\{" + "did" + "\\}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doctorsDidGetValidateBeforeCall(Integer did, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling doctorsDidGet(Async)");
        }
        

        okhttp3.Call localVarCall = doctorsDidGetCall(did, _callback);
        return localVarCall;

    }

    /**
     * Get a doctor by ID
     * Returns the doctor with the specified ID. 
     * @param did  (required)
     * @return DoctorModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested doctor was returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public DoctorModel doctorsDidGet(Integer did) throws ApiException {
        ApiResponse<DoctorModel> localVarResp = doctorsDidGetWithHttpInfo(did);
        return localVarResp.getData();
    }

    /**
     * Get a doctor by ID
     * Returns the doctor with the specified ID. 
     * @param did  (required)
     * @return ApiResponse&lt;DoctorModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested doctor was returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DoctorModel> doctorsDidGetWithHttpInfo(Integer did) throws ApiException {
        okhttp3.Call localVarCall = doctorsDidGetValidateBeforeCall(did, null);
        Type localVarReturnType = new TypeToken<DoctorModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a doctor by ID (asynchronously)
     * Returns the doctor with the specified ID. 
     * @param did  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested doctor was returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsDidGetAsync(Integer did, final ApiCallback<DoctorModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = doctorsDidGetValidateBeforeCall(did, _callback);
        Type localVarReturnType = new TypeToken<DoctorModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doctorsDidPut
     * @param did  (required)
     * @param doctor  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was updated successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conflict occurred while updating the doctor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsDidPutCall(Integer did, DoctorModel doctor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = doctor;

        // create path and map variables
        String localVarPath = "/doctors/{did}"
            .replaceAll("\\{" + "did" + "\\}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doctorsDidPutValidateBeforeCall(Integer did, DoctorModel doctor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling doctorsDidPut(Async)");
        }
        
        // verify the required parameter 'doctor' is set
        if (doctor == null) {
            throw new ApiException("Missing the required parameter 'doctor' when calling doctorsDidPut(Async)");
        }
        

        okhttp3.Call localVarCall = doctorsDidPutCall(did, doctor, _callback);
        return localVarCall;

    }

    /**
     * Update a doctor by ID
     * Updates the doctor with the specified ID. 
     * @param did  (required)
     * @param doctor  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was updated successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conflict occurred while updating the doctor </td><td>  -  </td></tr>
     </table>
     */
    public String doctorsDidPut(Integer did, DoctorModel doctor) throws ApiException {
        ApiResponse<String> localVarResp = doctorsDidPutWithHttpInfo(did, doctor);
        return localVarResp.getData();
    }

    /**
     * Update a doctor by ID
     * Updates the doctor with the specified ID. 
     * @param did  (required)
     * @param doctor  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was updated successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conflict occurred while updating the doctor </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> doctorsDidPutWithHttpInfo(Integer did, DoctorModel doctor) throws ApiException {
        okhttp3.Call localVarCall = doctorsDidPutValidateBeforeCall(did, doctor, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a doctor by ID (asynchronously)
     * Updates the doctor with the specified ID. 
     * @param did  (required)
     * @param doctor  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was updated successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conflict occurred while updating the doctor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsDidPutAsync(Integer did, DoctorModel doctor, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = doctorsDidPutValidateBeforeCall(did, doctor, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doctorsLoginPost
     * @param doctor  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was logged in successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The ID and password combination is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsLoginPostCall(DoctorLoginDTO doctor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = doctor;

        // create path and map variables
        String localVarPath = "/doctors/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doctorsLoginPostValidateBeforeCall(DoctorLoginDTO doctor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'doctor' is set
        if (doctor == null) {
            throw new ApiException("Missing the required parameter 'doctor' when calling doctorsLoginPost(Async)");
        }
        

        okhttp3.Call localVarCall = doctorsLoginPostCall(doctor, _callback);
        return localVarCall;

    }

    /**
     * Log in a doctor
     * Logs in a doctor by verifying their ID and password. 
     * @param doctor  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was logged in successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The ID and password combination is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public String doctorsLoginPost(DoctorLoginDTO doctor) throws ApiException {
        ApiResponse<String> localVarResp = doctorsLoginPostWithHttpInfo(doctor);
        return localVarResp.getData();
    }

    /**
     * Log in a doctor
     * Logs in a doctor by verifying their ID and password. 
     * @param doctor  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was logged in successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The ID and password combination is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> doctorsLoginPostWithHttpInfo(DoctorLoginDTO doctor) throws ApiException {
        okhttp3.Call localVarCall = doctorsLoginPostValidateBeforeCall(doctor, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log in a doctor (asynchronously)
     * Logs in a doctor by verifying their ID and password. 
     * @param doctor  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was logged in successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The ID and password combination is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The doctor with the specified ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsLoginPostAsync(DoctorLoginDTO doctor, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = doctorsLoginPostValidateBeforeCall(doctor, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doctorsRegisterPost
     * @param doctor  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was registered successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A doctor with the same ID already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsRegisterPostCall(DoctorModel doctor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = doctor;

        // create path and map variables
        String localVarPath = "/doctors/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doctorsRegisterPostValidateBeforeCall(DoctorModel doctor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'doctor' is set
        if (doctor == null) {
            throw new ApiException("Missing the required parameter 'doctor' when calling doctorsRegisterPost(Async)");
        }
        

        okhttp3.Call localVarCall = doctorsRegisterPostCall(doctor, _callback);
        return localVarCall;

    }

    /**
     * Register a new doctor
     * Registers a new doctor in the system. 
     * @param doctor  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was registered successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A doctor with the same ID already exists </td><td>  -  </td></tr>
     </table>
     */
    public String doctorsRegisterPost(DoctorModel doctor) throws ApiException {
        ApiResponse<String> localVarResp = doctorsRegisterPostWithHttpInfo(doctor);
        return localVarResp.getData();
    }

    /**
     * Register a new doctor
     * Registers a new doctor in the system. 
     * @param doctor  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was registered successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A doctor with the same ID already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> doctorsRegisterPostWithHttpInfo(DoctorModel doctor) throws ApiException {
        okhttp3.Call localVarCall = doctorsRegisterPostValidateBeforeCall(doctor, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new doctor (asynchronously)
     * Registers a new doctor in the system. 
     * @param doctor  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doctor was registered successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A doctor with the same ID already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doctorsRegisterPostAsync(DoctorModel doctor, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = doctorsRegisterPostValidateBeforeCall(doctor, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param oid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(Integer oid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessions/session/{oid}"
            .replaceAll("\\{" + "oid" + "\\}", localVarApiClient.escapeString(oid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(Integer oid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling get(Async)");
        }
        

        okhttp3.Call localVarCall = getCall(oid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param oid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void get(Integer oid) throws ApiException {
        getWithHttpInfo(oid);
    }

    /**
     * 
     * 
     * @param oid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getWithHttpInfo(Integer oid) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(oid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(Integer oid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(oid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByDoctorId
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByDoctorIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessions/doctor/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByDoctorIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getByDoctorId(Async)");
        }
        

        okhttp3.Call localVarCall = getByDoctorIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void getByDoctorId(Integer id) throws ApiException {
        getByDoctorIdWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getByDoctorIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getByDoctorIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByDoctorIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByDoctorIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByNameAndDoctor
     * @param doctor  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByNameAndDoctorCall(Integer doctor, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessions/session/name/{doctor}/{name}"
            .replaceAll("\\{" + "doctor" + "\\}", localVarApiClient.escapeString(doctor.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByNameAndDoctorValidateBeforeCall(Integer doctor, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'doctor' is set
        if (doctor == null) {
            throw new ApiException("Missing the required parameter 'doctor' when calling getByNameAndDoctor(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getByNameAndDoctor(Async)");
        }
        

        okhttp3.Call localVarCall = getByNameAndDoctorCall(doctor, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param doctor  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void getByNameAndDoctor(Integer doctor, String name) throws ApiException {
        getByNameAndDoctorWithHttpInfo(doctor, name);
    }

    /**
     * 
     * 
     * @param doctor  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getByNameAndDoctorWithHttpInfo(Integer doctor, String name) throws ApiException {
        okhttp3.Call localVarCall = getByNameAndDoctorValidateBeforeCall(doctor, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param doctor  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByNameAndDoctorAsync(Integer doctor, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByNameAndDoctorValidateBeforeCall(doctor, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByPatientId
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByPatientIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessions/patient/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByPatientIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getByPatientId(Async)");
        }
        

        okhttp3.Call localVarCall = getByPatientIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void getByPatientId(Integer id) throws ApiException {
        getByPatientIdWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getByPatientIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getByPatientIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByPatientIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByPatientIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for patientsAllGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of patients was returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsAllGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patients/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patientsAllGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = patientsAllGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get all patients
     * Returns a list of all patients in the system. 
     * @return List&lt;PatientDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of patients was returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public List<PatientDTO> patientsAllGet() throws ApiException {
        ApiResponse<List<PatientDTO>> localVarResp = patientsAllGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all patients
     * Returns a list of all patients in the system. 
     * @return ApiResponse&lt;List&lt;PatientDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of patients was returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PatientDTO>> patientsAllGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = patientsAllGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PatientDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all patients (asynchronously)
     * Returns a list of all patients in the system. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of patients was returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsAllGetAsync(final ApiCallback<List<PatientDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patientsAllGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PatientDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patientsEmailEmailGet
     * @param email  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested patient was returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The patient with the specified email was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsEmailEmailGetCall(String email, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patients/email/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patientsEmailEmailGetValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling patientsEmailEmailGet(Async)");
        }
        

        okhttp3.Call localVarCall = patientsEmailEmailGetCall(email, _callback);
        return localVarCall;

    }

    /**
     * Get a patient by email
     * Returns the patient with the specified email. 
     * @param email  (required)
     * @return PatientDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested patient was returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The patient with the specified email was not found </td><td>  -  </td></tr>
     </table>
     */
    public PatientDTO patientsEmailEmailGet(String email) throws ApiException {
        ApiResponse<PatientDTO> localVarResp = patientsEmailEmailGetWithHttpInfo(email);
        return localVarResp.getData();
    }

    /**
     * Get a patient by email
     * Returns the patient with the specified email. 
     * @param email  (required)
     * @return ApiResponse&lt;PatientDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested patient was returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The patient with the specified email was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatientDTO> patientsEmailEmailGetWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = patientsEmailEmailGetValidateBeforeCall(email, null);
        Type localVarReturnType = new TypeToken<PatientDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a patient by email (asynchronously)
     * Returns the patient with the specified email. 
     * @param email  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested patient was returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The patient with the specified email was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsEmailEmailGetAsync(String email, final ApiCallback<PatientDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = patientsEmailEmailGetValidateBeforeCall(email, _callback);
        Type localVarReturnType = new TypeToken<PatientDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patientsLoginPost
     * @param patient  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The patient was logged in successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The email and password combination is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The patient with the specified email was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsLoginPostCall(PatientLoginDTO patient, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patient;

        // create path and map variables
        String localVarPath = "/patients/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patientsLoginPostValidateBeforeCall(PatientLoginDTO patient, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'patient' is set
        if (patient == null) {
            throw new ApiException("Missing the required parameter 'patient' when calling patientsLoginPost(Async)");
        }
        

        okhttp3.Call localVarCall = patientsLoginPostCall(patient, _callback);
        return localVarCall;

    }

    /**
     * Log in a patient
     * Logs in a patient by verifying their email and password. 
     * @param patient  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The patient was logged in successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The email and password combination is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The patient with the specified email was not found </td><td>  -  </td></tr>
     </table>
     */
    public void patientsLoginPost(PatientLoginDTO patient) throws ApiException {
        patientsLoginPostWithHttpInfo(patient);
    }

    /**
     * Log in a patient
     * Logs in a patient by verifying their email and password. 
     * @param patient  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The patient was logged in successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The email and password combination is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The patient with the specified email was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patientsLoginPostWithHttpInfo(PatientLoginDTO patient) throws ApiException {
        okhttp3.Call localVarCall = patientsLoginPostValidateBeforeCall(patient, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Log in a patient (asynchronously)
     * Logs in a patient by verifying their email and password. 
     * @param patient  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The patient was logged in successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The email and password combination is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The patient with the specified email was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsLoginPostAsync(PatientLoginDTO patient, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patientsLoginPostValidateBeforeCall(patient, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for patientsPidGet
     * @param pid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested patient was returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsPidGetCall(Integer pid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patients/{pid}"
            .replaceAll("\\{" + "pid" + "\\}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patientsPidGetValidateBeforeCall(Integer pid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling patientsPidGet(Async)");
        }
        

        okhttp3.Call localVarCall = patientsPidGetCall(pid, _callback);
        return localVarCall;

    }

    /**
     * Get a patient by ID
     * Returns the patient with the specified ID. 
     * @param pid  (required)
     * @return PatientLoginDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested patient was returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public PatientLoginDTO patientsPidGet(Integer pid) throws ApiException {
        ApiResponse<PatientLoginDTO> localVarResp = patientsPidGetWithHttpInfo(pid);
        return localVarResp.getData();
    }

    /**
     * Get a patient by ID
     * Returns the patient with the specified ID. 
     * @param pid  (required)
     * @return ApiResponse&lt;PatientLoginDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested patient was returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatientLoginDTO> patientsPidGetWithHttpInfo(Integer pid) throws ApiException {
        okhttp3.Call localVarCall = patientsPidGetValidateBeforeCall(pid, null);
        Type localVarReturnType = new TypeToken<PatientLoginDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a patient by ID (asynchronously)
     * Returns the patient with the specified ID. 
     * @param pid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested patient was returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsPidGetAsync(Integer pid, final ApiCallback<PatientLoginDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = patientsPidGetValidateBeforeCall(pid, _callback);
        Type localVarReturnType = new TypeToken<PatientLoginDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patientsRegisterPost
     * @param patient  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The patient was registered successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A patient with the same ID already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsRegisterPostCall(PatientDTO patient, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patient;

        // create path and map variables
        String localVarPath = "/patients/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patientsRegisterPostValidateBeforeCall(PatientDTO patient, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'patient' is set
        if (patient == null) {
            throw new ApiException("Missing the required parameter 'patient' when calling patientsRegisterPost(Async)");
        }
        

        okhttp3.Call localVarCall = patientsRegisterPostCall(patient, _callback);
        return localVarCall;

    }

    /**
     * Register a new patient
     * Registers a new patient in the system. 
     * @param patient  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The patient was registered successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A patient with the same ID already exists </td><td>  -  </td></tr>
     </table>
     */
    public void patientsRegisterPost(PatientDTO patient) throws ApiException {
        patientsRegisterPostWithHttpInfo(patient);
    }

    /**
     * Register a new patient
     * Registers a new patient in the system. 
     * @param patient  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The patient was registered successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A patient with the same ID already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patientsRegisterPostWithHttpInfo(PatientDTO patient) throws ApiException {
        okhttp3.Call localVarCall = patientsRegisterPostValidateBeforeCall(patient, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a new patient (asynchronously)
     * Registers a new patient in the system. 
     * @param patient  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The patient was registered successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A patient with the same ID already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsRegisterPostAsync(PatientDTO patient, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patientsRegisterPostValidateBeforeCall(patient, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reject
     * @param name  (required)
     * @param doctor  (required)
     * @param patient  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectCall(String name, Integer doctor, Integer patient, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/reject/{name}/{doctor}/{patient}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "doctor" + "\\}", localVarApiClient.escapeString(doctor.toString()))
            .replaceAll("\\{" + "patient" + "\\}", localVarApiClient.escapeString(patient.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectValidateBeforeCall(String name, Integer doctor, Integer patient, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling reject(Async)");
        }
        
        // verify the required parameter 'doctor' is set
        if (doctor == null) {
            throw new ApiException("Missing the required parameter 'doctor' when calling reject(Async)");
        }
        
        // verify the required parameter 'patient' is set
        if (patient == null) {
            throw new ApiException("Missing the required parameter 'patient' when calling reject(Async)");
        }
        

        okhttp3.Call localVarCall = rejectCall(name, doctor, patient, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param doctor  (required)
     * @param patient  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void reject(String name, Integer doctor, Integer patient) throws ApiException {
        rejectWithHttpInfo(name, doctor, patient);
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param doctor  (required)
     * @param patient  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rejectWithHttpInfo(String name, Integer doctor, Integer patient) throws ApiException {
        okhttp3.Call localVarCall = rejectValidateBeforeCall(name, doctor, patient, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param doctor  (required)
     * @param patient  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectAsync(String name, Integer doctor, Integer patient, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectValidateBeforeCall(name, doctor, patient, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsCreatePost
     * @param request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was created successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A request with the same session name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsCreatePostCall(RequestModel request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/requests/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsCreatePostValidateBeforeCall(RequestModel request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling requestsCreatePost(Async)");
        }
        

        okhttp3.Call localVarCall = requestsCreatePostCall(request, _callback);
        return localVarCall;

    }

    /**
     * Create a new request
     * Creates a new request in the system. 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was created successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A request with the same session name already exists </td><td>  -  </td></tr>
     </table>
     */
    public void requestsCreatePost(RequestModel request) throws ApiException {
        requestsCreatePostWithHttpInfo(request);
    }

    /**
     * Create a new request
     * Creates a new request in the system. 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was created successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A request with the same session name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestsCreatePostWithHttpInfo(RequestModel request) throws ApiException {
        okhttp3.Call localVarCall = requestsCreatePostValidateBeforeCall(request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new request (asynchronously)
     * Creates a new request in the system. 
     * @param request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was created successfully </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A request with the same session name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsCreatePostAsync(RequestModel request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsCreatePostValidateBeforeCall(request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = requestsIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get request session by ID
     * Returns the request session with the specified ID.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void requestsIdGet(Integer id) throws ApiException {
        requestsIdGetWithHttpInfo(id);
    }

    /**
     * Get request session by ID
     * Returns the request session with the specified ID.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = requestsIdGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get request session by ID (asynchronously)
     * Returns the request session with the specified ID.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsIdGetAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsIdGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsPendingDoctorIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsPendingDoctorIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/pending/doctor/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsPendingDoctorIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestsPendingDoctorIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = requestsPendingDoctorIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get pending request sessions objects by doctor ID
     * Returns the pending request sessions objects for the doctor with the specified ID.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void requestsPendingDoctorIdGet(Integer id) throws ApiException {
        requestsPendingDoctorIdGetWithHttpInfo(id);
    }

    /**
     * Get pending request sessions objects by doctor ID
     * Returns the pending request sessions objects for the doctor with the specified ID.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestsPendingDoctorIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = requestsPendingDoctorIdGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get pending request sessions objects by doctor ID (asynchronously)
     * Returns the pending request sessions objects for the doctor with the specified ID.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsPendingDoctorIdGetAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsPendingDoctorIdGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsPendingPatientIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsPendingPatientIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/pending/patient/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsPendingPatientIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestsPendingPatientIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = requestsPendingPatientIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get pending request sessions objects by patient ID
     * Returns the pending request sessions objects for the patient with the specified ID.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void requestsPendingPatientIdGet(Integer id) throws ApiException {
        requestsPendingPatientIdGetWithHttpInfo(id);
    }

    /**
     * Get pending request sessions objects by patient ID
     * Returns the pending request sessions objects for the patient with the specified ID.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestsPendingPatientIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = requestsPendingPatientIdGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get pending request sessions objects by patient ID (asynchronously)
     * Returns the pending request sessions objects for the patient with the specified ID.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsPendingPatientIdGetAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsPendingPatientIdGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsRejectedDoctorIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRejectedDoctorIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/rejected/doctor/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsRejectedDoctorIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestsRejectedDoctorIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = requestsRejectedDoctorIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get rejected request sessions objects by doctor ID
     * Returns the rejected request sessions objects for the doctor with the specified ID.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void requestsRejectedDoctorIdGet(Integer id) throws ApiException {
        requestsRejectedDoctorIdGetWithHttpInfo(id);
    }

    /**
     * Get rejected request sessions objects by doctor ID
     * Returns the rejected request sessions objects for the doctor with the specified ID.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestsRejectedDoctorIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = requestsRejectedDoctorIdGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get rejected request sessions objects by doctor ID (asynchronously)
     * Returns the rejected request sessions objects for the doctor with the specified ID.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRejectedDoctorIdGetAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsRejectedDoctorIdGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsRejectedPatientIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRejectedPatientIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/rejected/patient/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsRejectedPatientIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestsRejectedPatientIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = requestsRejectedPatientIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get rejected request sessions objects by doctor ID
     * Returns the rejected request sessions objects for the doctor with the specified ID.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void requestsRejectedPatientIdGet(Integer id) throws ApiException {
        requestsRejectedPatientIdGetWithHttpInfo(id);
    }

    /**
     * Get rejected request sessions objects by doctor ID
     * Returns the rejected request sessions objects for the doctor with the specified ID.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestsRejectedPatientIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = requestsRejectedPatientIdGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get rejected request sessions objects by doctor ID (asynchronously)
     * Returns the rejected request sessions objects for the doctor with the specified ID.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRejectedPatientIdGetAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsRejectedPatientIdGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param doctor  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(Integer doctor, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessions/session/name/{doctor}/{name}"
            .replaceAll("\\{" + "doctor" + "\\}", localVarApiClient.escapeString(doctor.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(Integer doctor, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'doctor' is set
        if (doctor == null) {
            throw new ApiException("Missing the required parameter 'doctor' when calling update(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling update(Async)");
        }
        

        okhttp3.Call localVarCall = updateCall(doctor, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param doctor  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void update(Integer doctor, String name) throws ApiException {
        updateWithHttpInfo(doctor, name);
    }

    /**
     * 
     * 
     * @param doctor  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateWithHttpInfo(Integer doctor, String name) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(doctor, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param doctor  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(Integer doctor, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(doctor, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
