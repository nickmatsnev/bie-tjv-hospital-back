swagger: "2.0"
info:
  title: Documentation
  description: Documentation for backend by swagger
  version: 1.0.0
  contact:
    name: Nikita
    email: matsnnik@fit.cvut.cz
host: localhost:8085
schemes:
  - http
paths:
  /doctors/register:
    post:
      summary: Register a new doctor
      description: |
        Registers a new doctor in the system.
      parameters:
        - name: doctor
          in: body
          required: true
          schema:
            $ref: '#/definitions/DoctorModel'
      responses:
        200:
          description: The doctor was registered successfully
          schema:
            type: string
        409:
          description: A doctor with the same ID already exists
          schema:
            type: string
  /doctors/login:
    post:
      summary: Log in a doctor
      description: |
        Logs in a doctor by verifying their ID and password.
      parameters:
        - name: doctor
          in: body
          required: true
          schema:
            $ref: '#/definitions/DoctorLoginDTO'
      responses:
        200:
          description: The doctor was logged in successfully
          schema:
            type: string
        401:
          description: The ID and password combination is invalid
          schema:
            type: string
        404:
          description: The doctor with the specified ID was not found
          schema:
            type: string
  /doctors/{did}:
    get:
      summary: Get a doctor by ID
      description: |
        Returns the doctor with the specified ID.
      parameters:
        - name: did
          in: path
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The requested doctor was returned successfully
          schema:
            $ref: '#/definitions/DoctorModel'
        404:
          description: The doctor with the specified ID was not found
          schema:
            type: string
    put:
      summary: Update a doctor by ID
      description: |
        Updates the doctor with the specified ID.
      parameters:
        - name: did
          in: path
          required: true
          type: integer
          format: int32
        - name: doctor
          in: body
          required: true
          schema:
            $ref: '#/definitions/DoctorModel'
      responses:
        200:
          description: The doctor was updated successfully
          schema:
            type: string
        409:
          description: A conflict occurred while updating the doctor
          schema:
            type: string
    delete:
      summary: Delete a doctor by ID
      description: |
        Deletes the doctor with the specified ID.
      parameters:
        - name: did
          in: path
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The doctor was deleted successfully
          schema:
            type: string
        404:
          description: The doctor with the specified ID was not found
          schema:
            type: string
  /patients/register:
    post:
      summary: Register a new patient
      description: |
        Registers a new patient in the system.
      parameters:
        - name: patient
          in: body
          required: true
          schema:
            $ref: '#/definitions/PatientDTO'
      responses:
        200:
          description: The patient was registered successfully
        409:
          description: A patient with the same ID already exists
  /patients/login:
    post:
      summary: Log in a patient
      description: |
        Logs in a patient by verifying their email and password.
      parameters:
        - name: patient
          in: body
          required: true
          schema:
            $ref: '#/definitions/PatientLoginDTO'
      responses:
        200:
          description: The patient was logged in successfully
        401:
          description: The email and password combination is invalid
        404:
          description: The patient with the specified email was not found
  /patients/{pid}:
    get:
      summary: Get a patient by ID
      description: |
        Returns the patient with the specified ID.
      parameters:
        - name: pid
          in: path
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The requested patient was returned successfully
          schema:
            $ref: '#/definitions/PatientLoginDTO'
  /patients/email/{email}:
    get:
      summary: Get a patient by email
      description: |
        Returns the patient with the specified email.
      parameters:
        - name: email
          in: path
          required: true
          type: string
      responses:
        200:
          description: The requested patient was returned successfully
          schema:
            $ref: '#/definitions/PatientDTO'
        404:
          description: The patient with the specified email was not found

  /patients/all:
    get:
      summary: Get all patients
      description: |
        Returns a list of all patients in the system.
      responses:
        200:
          description: The list of patients was returned successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/PatientDTO'
  /requests/create:
      post:
        summary: Create a new request
        description: |
          Creates a new request in the system.
        parameters:
          - name: request
            in: body
            required: true
            schema:
              $ref: '#/definitions/RequestModel'
        responses:
          200:
            description: The request was created successfully
          409:
            description: A request with the same session name already exists
  /requests/{id}:
    get:
      summary: Get request session by ID
      description: Returns the request session with the specified ID.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The requested request session object was returned successfully
          $ref: '#/definitions/RequestModel'
  /requests/pending/doctor/{id}:
    get:
      summary: Get pending request sessions objects by doctor ID
      description: Returns the pending request sessions objects for the doctor with the specified ID.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The requested pending request sessions objects were returned successfully
          $ref: '#/definitions/RequestSessionModel'

  /requests/rejected/doctor/{id}:
    get:
      summary: Get rejected request sessions objects by doctor ID
      description: Returns the rejected request sessions objects for the doctor with the specified ID.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The requested rejected request sessions objects were returned successfully
          $ref: '#/definitions/RequestSessionModel'

  /requests/pending/patient/{id}:
    get:
      summary: Get pending request sessions objects by patient ID
      description: Returns the pending request sessions objects for the patient with the specified ID.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The requested pending request sessions objects were returned successfully
          $ref: '#/definitions/RequestSessionModel'

  /requests/rejected/patient/{id}:
    get:
      summary: Get rejected request sessions objects by doctor ID
      description: Returns the rejected request sessions objects for the doctor with the specified ID.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The requested rejected request sessions were returned successfully
          $ref: '#/definitions/RequestSessionModel'
  /requests/accept/{name}/{doctor}/{patient}:
    get:
      operationId: accept
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: doctor
          in: path
          required: true
          type: integer
        - name: patient
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Success
        404:
          description: Not Found
  /requests/reject/{name}/{doctor}/{patient}:
    get:
      operationId: reject
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: doctor
          in: path
          required: true
          type: integer
        - name: patient
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Success
        404:
          description: Not Found
  /sessions/create:
    post:
      operationId: create
      responses:
        201:
          description: Success
        409:
          description: Conflict
  /sessions/session/{oid}:
    get:
      operationId: get
      parameters:
        - name: oid
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Success
          $ref: '#/components/schemas/SessionActualDTO'
        404:
          description: Not Found
    delete:
      operationId: delete
      parameters:
        - name: oid
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Success
        404:
          description: Not Found
        409:
          description: Conflict
  /sessions/session/name/{doctor}/{name}:
    get:
      operationId: getByNameAndDoctor
      parameters:
        - name: doctor
          in: path
          required: true
          type: integer
        - name: name
          in: path
          required: true
          type: string
      responses:
        200:
          description: Success
          $ref: '#/components/schemas/SessionActualDTO'
        404:
          description: Not Found
    post:
      operationId: update
      parameters:
        - name: doctor
          in: path
          required: true
          type: integer
        - name: name
          in: path
          required: true
          type: string
      responses:
        200:
          description: Success
        409:
          description: Conflict
        404:
          description: Not Found
  /sessions/patient/{id}:
    get:
      operationId: getByPatientId
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Success
          $ref: '#/components/schemas/SessionModel'
        404:
          description: Not Found
  /sessions/doctor/{id}:
    get:
      operationId: getByDoctorId
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Success
          $ref: '#/components/schemas/SessionModel'
        404:
          description: Not Found
definitions:
  PatientDTO:
    type: object
    properties:
      pid:
        type: integer
        format: int32
      email:
        type: string
      name:
        type: string
      surname:
        type: string
      age:
        type: integer
        format: int32
      password:
        type: string
  DoctorModel:
    type: object
    properties:
      did:
        type: integer
        format: int32
      name:
        type: string
      surname:
        type: string
      dType:
        type: string
      password:
        type: string
  RequestModel:
    type: object
    required:
      - patientId
      - doctorId
      - startTime
      - endTime
      - sessionName
    properties:
      patientId:
        type: integer
        format: int32
      doctorId:
        type: integer
        format: int32
      startTime:
        type: string
        format: time
      endTime:
        type: string
        format: time
      sessionName:
        type: string
  SessionActualDTO:
    type: object
    properties:
      plannedStart:
        type: string
        format: date-time
      plannedEnd:
        type: string
        format: date-time
      name:
        type: string
      doctor:
        type: integer
        format: int64
      patient:
        type: string
    required:
      - plannedStart
      - plannedEnd
      - name
      - doctor
      - patient